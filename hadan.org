
* Hadan
** Этапы
*** Возможность симуляции стратегии на тестовых данных
**** Что нужно для этого
***** TODO Биндинг к базе данных с поддержкой Decimal
****** TODO Сделать патч к HDBC и добавить в него поддержку Decimal
******* DONE Сделать патч к convertible и добавить поддержку Decimal
******** DONE Сделать патч к Decimal и добавить fromRational и Typeable
******* DONE Пересмотреть SqlValue сократить и упростить
******* DONE Пересмотреть код HDBC
******** DONE Структурировать знание по HDBC в его текущем состоянии
         CLOCK: [2013-03-07 Чт. 12:45]--[2013-03-07 Чт. 17:01] =>  4:16
******** DONE Четко определить задачи, решаемые библиотекой
******** DONE Продумать архитектуру главной библиотеки и драйверов
         
******* TODO Переписать HDBC в соответствии с задачами
******** DONE Переделать сам пакет HDBC
********* DONE SqlValue
          CLOCK: [2013-03-16 Сб. 14:58]--[2013-03-16 Сб. 15:18] =>  0:20
          Убрать все что не относится к
********* DONE Connection
          CLOCK: [2013-03-16 Сб. 15:18]--[2013-03-16 Сб. 15:40] =>  0:22
********* DONE Statement
          CLOCK: [2013-03-16 Сб. 17:11]--[2013-03-16 Сб. 17:47] =>  0:36
          Оставить только интерфейс
********* DONE Utils
          CLOCK: [2013-03-16 Сб. 18:54]--[2013-03-16 Сб. 19:53] =>  0:59
          CLOCK: [2013-03-16 Сб. 17:47]--[2013-03-16 Сб. 17:53] =>  0:06
          Оставить только
          1. fromSql, toSql и аналоги
          2. withConnection ConnWrapper
          3. withTransaction
          4. run и аналогичные функции, которые
             безопасно, в bracket выполняют создание
             Statement и финализируют его по завершении запроса
          5. Убрать операции с ленивыми списками
********* DONE DriverUtils
          CLOCK: [2013-03-17 Вс. 01:06]--[2013-03-17 Вс. 01:53] =>  0:47
          1. Заменить Mvar на IORef и сделать безопасный
             апдейт значения
********* DONE Переделать Statement
          Убрать возврат affectedRows и вместо него
          сделать два дополнительных вызова
          1. affectedRows - количетво строк, затронутых запросом
          2. lastID - последний ID после инсерта
********* DONE Провреить Typeable, везде должно быть deriving
********* DONE Переделать интерфейсы Connection и Statement
          Убрать явное выбрасывание исключений и сделать
          безопасный интерфейс на Either и
          соответствющие обертки, выбрасывающие
          исключение, если Left
********* DONE Добавить методы для интерфейсов
          1. Проверка статуса соединения и выроажения
          2. Проверка статуса транзакции в соединении
********* DONE Переделать Statement в тайпкласс по аналогии c Connection
          CLOCK: [2013-03-20 Ср. 10:35]--[2013-03-20 Ср. 12:38] =>  2:03
********* DONE Удалить условную компиляцию для GHC < 6.10
          CLOCK: [2013-03-20 Ср. 12:39]--[2013-03-20 Ср. 12:50] =>  0:11
********* DONE Вернуть обратно врапперы для Connection и Statement
********* DONE Cabal file
********* DONE Документация в HDBC
          Самое главное - написать главное пояснение за
          новый HDBC, чтобы вопросов не было что это и
          зачем переписано со старого
********** DONE Документация по модулям
           CLOCK: [2013-04-04 Чт. 10:11]--[2013-04-04 Чт. 10:58] =>  0:47
           CLOCK: [2013-04-06 Сб 18:58]--[2013-04-06 20:00] =>  1:02
           CLOCK: [2013-03-29 Пт. 10:32]--[2013-03-29 Пт. 17:00] =>  6:28
           CLOCK: [2013-03-22 Пт. 12:10]--[2013-03-22 Пт. 14:49] =>  2:39
           CLOCK: [2013-03-21 Чт. 11:55]--[2013-03-21 Чт. 13:00] =>  1:05
********** DONE Вступительное пояснение
********** Структура
*********** DONE Введение 
*********** DONE Design notes
            Быть может примеры работы с даункастом и
            прочие плюшки
*********** DONE Roadmap
*********** DONE Differenct between 2 and 3
************ Список различий
************ Различия в SqlValue
*********** DONE Drivers
*********** DONE Thread safety
********* DONE Переработать строки
********** DONE Убрать String в запросах, заменить на Text
********** DONE SqlByteString -> SqlBlob, SqlString -> SqlText
********* DONE Убрать SqlResult
          тупо выбрасывать исключения, потом придумаю
          более логичное решение.
********* DONE Перенести run в тайпкласс Connection
********* DONE tests
********** DONE Сделать dummy драйвер и протестировать.
********** DONE Переделать тесткейсы под использование other-modules
           CLOCK: [2013-07-05 Пт 23:06]--[2013-07-05 Пт 23:25] =>  0:19
********** DONE Протестировать метод fetchAllRows (как ?)
           CLOCK: [2013-07-07 Вс 12:47]--[2013-07-07 Вс 18:12] =>  5:25
           Изменить DummyStatement чтобы тот запоминал
           insert команды, а потом команда select
           выдавала список всех вставленных данных в
           том же порядке. Так можно проверить порядок
           выбора fetchAllRows
********* DONE Убрать из SqlValue SqlNow
          Дурацкое значение, имея возможность
          определения типа базы, это не нужно, ведь
          любые базозависимые функции можно вызвать
          вручную
********* DONE Добавить опциональный метод fetchAllRows
********* DONE Сделать блядь форк hdbc-ng
********** DONE Выпилить Convertible
*********** DONE Decimal
*********** DONE Int32
*********** DONE Int64
*********** DONE Integer
*********** DONE Word32
*********** DONE Word64
*********** DONE Word
*********** DONE Double
*********** DONE TL.Text
*********** DONE T.Text
*********** DONE String
*********** DONE B.ByteString
*********** DONE BL.ByteString
*********** DONE Bool
*********** DONE UUID
*********** DONE UTCTime
*********** DONE Day 
*********** DONE TimeOfDay 
*********** DONE LocalTime
*********** DONE (FromSql a) => Maybe a
********** DONE Сделать быстрые преобразования дат и чисел из/в текст на парсерах
********* DONE Протестировать парсеры конкретными юзкейсами
********* DONE hdbi
********** DONE выпилить упоминания о convertible
********** DONE сгенерировать и перепроверить документашку
********** DONE сменить readme.md
********** DONE проставить информацию о модулях, статус стабильности, автора
********** DONE hdbc в именах методов и функций
********* Добавить prepareCached
          сделать генерацию имен с помощью UUID и
          простым prepare генерировать настоящие
          подготовленные запросы, а prepareCached типа
          кешированные, не подготовленные на стороне
          базы данных. Нужно будет делать два разных
          типа Statement и CachedStatement, хотя
          реализация может сослать два разных
          тайпфемили на один фактический тип.
********* Переписать DriverUtils
          Вместо перебора списка использовать IntMap на
          подобие как это сделано в ResouceT.
********* Вынести общий код тестов в отдельный пакет
          Сами пакеты с драйверами будут просто
          импортировать готовые тесты из этого пакета и
          передавать туда Connection для теста.
********* Сделать бенчмарки
********* Спецификация для вложенных транзакций ?
          Разные СУБД поддерживают вложенные транзакции
          так или иначе. Savepoints поддерживаются во
          всех основных СУБД, по этому можно добавить в
          интерфейс Connection поддержку savepoints.
******** DONE Переделать пакет hdbc-postgresql
********* DONE Перенести всю реализацию в Implementation
********* DONE Урезать экспортируемые функции из Implementation
          CLOCK: [2013-05-27 Пн 21:59]--[2013-05-27 Пн 22:48] =>  0:49
********* DONE Протестировать голые функции Implementation
          CLOCK: [2013-05-27 Пн 22:50]--[2013-05-27 Пн 23:48] =>  0:58
********* DONE Поправить парсинг времени, разобрать строку вручную, если нужно
          zoneinfo от базы иногда приходит в виде
          hh:mm:ss нужно определить такие случаи, и
          добавить нужное количество секунд после
          разбора даты.
          Решил выставить при конекте zoneinfo=utc
********* DONE Добавить тесты insertMany и fetchAll 
          CLOCK: [2013-06-09 Вс 19:13]--[2013-06-09 Вс 20:24] =>  1:11
********* DONE Переделать тесткейсы под использование other-modules
********* DONE Проверить покрытие кода
********* DONE Сделать парсер, превращающий ? в запросах в $1, $2
          PostgreSql имеет свой синтаксис параметров в
          запросах, отличающийся от
          бощепринятого. Возможно, стоит сделать HDBC
          общим интерфейсом для исполнения голых Sql
          запросов.
********* DONE Удалить закомиченые опции hpc из cabal
********* DONE Переписать под hdbc-ng
********** DONE Переделать парсер дат, да и возможно остальных типов
           Селект дат очень тормозит, ибо используется
           тайпкласс Read который работает со
           String. Написание специализированного парсера
           сильно ускорит.
********* Добавить функции произвольного доступа к результату
******** TODO Переделать пакет hdbc-sqlite3
********* DONE Сделать драйвер
********* DONE пофиксить импорты
          CLOCK: [2013-08-11 Вс 19:54]--[2013-08-11 Вс 20:21] =>  0:27
********* DONE пофиксить документацию
          CLOCK: [2013-08-11 Вс 20:21]--[2013-08-11 Вс 20:22] =>  0:01
********* DONE унифицировать код
          CLOCK: [2013-08-11 Вс 20:22]--[2013-08-11 Вс 20:59] =>  0:37
********* DONE unable to close due to unfinalized statements
          CLOCK: [2013-08-11 Вс 21:42]--[2013-08-11 Вс 23:27] =>  1:45
******** TODO Создать пакет hdbi-mysql
******* TODO Переписать документацию в пакетах
***** TODO Монада Strategy
***** TODO Импортировалка данных из онлайна или файла.
*** Возможность выставления заявок в Quik
**** Что нужно для этого
***** TODO DDE сервер для получения данных от Quik
***** TODO Биндинг к Quik для выставления заявок
      
* Удаленка
** Well-typed
   Отправил письмо, сказали что 
** dmz с жуика
   Будет известно в сентябре.
** ROR
   
